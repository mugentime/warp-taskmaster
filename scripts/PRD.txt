<context>
# Overview  
This is a personal fully-automated trading system designed to identify and execute funding rate arbitrage opportunities on Binance Futures. The system eliminates manual intervention by automatically detecting profitable funding rate spreads and executing trades without user oversight. The primary challenge to solve is the current frontend-backend communication failure when deploying to Railway cloud platform, which prevents the automated system from functioning in production.

# Core Features  
## Automated Arbitrage Detection
- Real-time monitoring of all USDT perpetual contracts on Binance Futures
- Automatic identification of funding rate arbitrage opportunities above configurable thresholds
- Continuous market scanning with minimal latency for optimal trade timing

## Fully Automated Execution Engine  
- Zero-click trade execution based on predefined risk parameters
- Simultaneous spot buy + futures short execution for funding rate capture
- Position management with automatic profit realization and loss prevention
- Portfolio rebalancing to maintain optimal capital allocation

## Cloud-Native Architecture
- Solves current Railway deployment communication issues between frontend and backend
- Robust API gateway design with proper CORS and environment variable handling
- Scalable microservices architecture that works reliably in cloud environments
- Health monitoring and automatic recovery mechanisms

# User Experience  
## Primary User: Personal Trader
- Tech-savvy individual seeking passive income through automated arbitrage
- Requires minimal daily interaction - system should run independently
- Values security, reliability, and transparent profit tracking

## Key User Flows
- **Setup Flow**: Configure API keys, set risk parameters, deploy to cloud
- **Monitoring Flow**: Review performance metrics, profit/loss, active positions
- **Maintenance Flow**: Adjust parameters, handle alerts, system health checks

## UI/UX Considerations
- Clean dashboard showing real-time P&L, active positions, and system status
- Mobile-responsive design for monitoring on-the-go
- Alert system for critical events (failed trades, API errors, significant losses)
</context>

<PRD>
# Technical Architecture  
## System Components
### Backend Services
- **Trade Execution Service**: Handles Binance API interactions and order management
- **Market Data Service**: Real-time funding rate monitoring and opportunity detection  
- **Risk Management Service**: Position sizing, stop-loss, and portfolio limits
- **Notification Service**: Alerts, logging, and performance reporting

### Frontend Application
- **Dashboard Interface**: React-based SPA for monitoring and configuration
- **Authentication Layer**: Secure API key management and user session handling
- **Real-time Updates**: WebSocket connections for live data streaming

### Data Layer
- **Position Database**: Track active trades, historical performance, and portfolio state
- **Configuration Store**: User preferences, risk parameters, and system settings
- **Audit Trail**: Complete transaction history and system event logging

## Railway Deployment Solution
### Root Cause Analysis of Communication Issues
- **CORS Configuration**: Implement proper cross-origin headers for production environment
- **Environment Variables**: Centralized config management with Railway-specific variables
- **Service Discovery**: Replace localhost references with Railway internal networking
- **Health Checks**: Implement proper startup probes and readiness endpoints

### Deployment Architecture
- **Monorepo Structure**: Single Railway service containing both frontend and backend
- **Build Process**: Multi-stage Docker build separating development and production assets
- **Environment Handling**: Railway-native environment variable injection
- **Port Management**: Dynamic port binding compatible with Railway's proxy

## APIs and Integrations
- **Binance Spot API**: Account balance, order execution, trade history
- **Binance Futures API**: Position management, funding rate data, market data
- **Internal REST API**: Communication between frontend and backend services
- **WebSocket Streams**: Real-time market data and position updates

## Infrastructure Requirements
- **Railway Cloud Platform**: Primary deployment target with auto-scaling capabilities
- **Database**: PostgreSQL for persistence, Redis for caching and session management
- **Monitoring**: Application logging, error tracking, and performance metrics
- **Security**: API key encryption, secure communication channels, input validation

# Development Roadmap  
## Phase 1: Deployment Infrastructure (MVP Foundation)
### 1.1 Railway Communication Fix
- Diagnose and resolve current frontend-backend communication failures
- Implement proper CORS configuration for production environment
- Replace hardcoded localhost URLs with environment-based service discovery
- Add comprehensive health check endpoints and startup validation

### 1.2 Robust Backend Architecture
- Refactor backend to handle Railway's dynamic port assignment
- Implement proper environment variable management and validation
- Add request/response logging for debugging communication issues
- Create unified API response format with proper error handling

### 1.3 Frontend Production Readiness
- Update frontend to use relative API URLs and environment-based configuration
- Implement proper error boundaries and loading states
- Add connection status monitoring and reconnection logic
- Optimize build process for Railway deployment

## Phase 2: Automated Trading Core
### 2.1 Market Data Engine
- Implement real-time funding rate monitoring for all USDT perpetual contracts
- Create opportunity scoring algorithm based on funding rate spreads and liquidity
- Add market condition filters to avoid trading during high volatility periods
- Build data validation and anomaly detection to prevent bad trade signals

### 2.2 Trade Execution System
- Develop atomic trade execution for simultaneous spot/futures positions
- Implement position sizing algorithm based on account balance and risk tolerance
- Add order management with proper error handling and retry mechanisms
- Create position reconciliation system to ensure data consistency

### 2.3 Risk Management Framework
- Build portfolio-level risk controls with maximum exposure limits
- Implement per-trade stop-loss and take-profit automation
- Add market condition monitoring to pause trading during adverse conditions
- Create emergency position closing mechanisms for extreme scenarios

## Phase 3: Production Automation
### 3.1 Autonomous Operation
- Complete end-to-end automation without manual intervention
- Implement intelligent parameter adjustment based on market conditions
- Add self-healing capabilities for common failure scenarios
- Create comprehensive monitoring and alerting for unattended operation

### 3.2 Performance Optimization
- Optimize execution speed to capture fleeting arbitrage opportunities
- Implement intelligent trade scheduling to minimize market impact
- Add advanced position management for complex arbitrage strategies
- Create backtesting framework for strategy validation

### 3.3 Enhanced Monitoring
- Build comprehensive performance analytics and reporting
- Add predictive alerts for potential issues before they occur
- Implement cost analysis to ensure profitability after fees
- Create detailed audit trails for regulatory compliance

# Logical Dependency Chain
## Foundation Layer (Must Complete First)
1. **Railway Deployment Fix** - Critical blocker preventing any cloud operation
2. **Environment Configuration** - Required for all subsequent cloud-based development
3. **API Communication Layer** - Foundation for all frontend-backend interactions
4. **Database Schema** - Required for persistent data storage

## Core Trading Layer (Build Upon Foundation)
5. **Market Data Integration** - Required before any trading logic
6. **Basic Trade Execution** - Manual execution capabilities first
7. **Position Management** - Track and manage individual trades
8. **Risk Controls** - Safety mechanisms before automation

## Automation Layer (Final Implementation)
9. **Automated Decision Engine** - AI-driven trade selection
10. **Full Automation** - Unattended operation capabilities
11. **Advanced Monitoring** - Production-grade observability
12. **Performance Optimization** - Fine-tuning for maximum profitability

# Risks and Mitigations  
## Technical Challenges
### Risk: Railway Communication Issues Persist
- **Likelihood**: Medium - Complex cloud networking and CORS issues
- **Mitigation**: Systematic debugging approach with Railway support, fallback to alternative cloud providers (Heroku, Vercel)
- **Contingency**: Implement hybrid architecture with separate hosting for frontend/backend

### Risk: Binance API Rate Limits
- **Likelihood**: High - Automated systems can easily exceed limits
- **Mitigation**: Implement intelligent request throttling, API key rotation, and caching strategies
- **Monitoring**: Real-time API usage tracking with proactive limit warnings

### Risk: Market Data Quality Issues
- **Likelihood**: Medium - External data dependency creates reliability concerns
- **Mitigation**: Multiple data source validation, anomaly detection, and circuit breakers
- **Fallback**: Manual override capabilities and conservative default behaviors

## Trading Risks
### Risk: Automated Trading Losses
- **Likelihood**: High - Market conditions can change rapidly
- **Mitigation**: Strict position sizing, stop-loss automation, and maximum drawdown limits
- **Safeguards**: Emergency stop mechanisms and real-time portfolio monitoring

### Risk: API Key Compromise
- **Likelihood**: Medium - Security vulnerabilities in automated systems
- **Mitigation**: Hardware security modules, API key rotation, and minimal permission principle
- **Detection**: Unusual activity monitoring and immediate alert systems

## Operational Risks
### Risk: System Downtime During Profitable Opportunities
- **Likelihood**: Medium - Cloud infrastructure and dependency failures
- **Mitigation**: Multiple deployment regions, health monitoring, and automatic failover
- **Recovery**: Rapid deployment procedures and manual trading capabilities

# Appendix  
## Research Findings
- Railway deployment requires specific port binding and environment variable handling
- Funding rate arbitrage opportunities typically last 15-45 minutes
- Binance API allows up to 1200 requests per minute with proper weight management
- Typical funding rate arbitrage yields 0.01% - 0.375% every 8 hours

## Technical Specifications
- **Programming Language**: Node.js/TypeScript for backend, React/TypeScript for frontend
- **Database**: PostgreSQL for persistence, Redis for real-time caching
- **API Framework**: Express.js with comprehensive middleware for security and logging
- **Deployment**: Docker containerization with Railway-specific optimizations
- **Security**: TLS encryption, API key management, input validation, and audit logging
</PRD>
